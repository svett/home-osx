#!/bin/bash

[ -z "$DEBUG" ] || set -x

RELOAD_SERVICES=()

main() {
  osx_software_update

  install_brew_if_not_exists
  install_brew_update

  configure_gimp

  symlink_ssl

  install_ruby
  install_python
  install_node
  install_rust
  install_libs

  osx_configure
  osx_appstore_update
  git_configure
  configure_postgres
  reload_modified_services

  update_golang_packages
  update_vim_plugins
  update_tmux_plugins
}

install_brew_if_not_exists() {
  if [[ ! -x /usr/local/bin/brew ]] ; then
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  fi
}

install_brew_update() {
  cd "${HOME}/etc" || return
  brew tap Homebrew/bundle
  brew update
  brew bundle
  brew bundle cleanup
  brew cask cleanup
}

install_ruby() {
  echo "Setting up ruby..."

  RUBY_VERSION="ruby-2.5.0"
  # shellcheck disable=SC1091
  source /usr/local/share/chruby/chruby.sh

  if chruby "$RUBY_VERSION" /dev/null 2>&1; then
    echo "$RUBY_VERSION is already installed..."
  else
    ruby-install "$RUBY_VERSION"

    gem install bundler
    gem install neovim
    gem install pry
    gem install rspec
  fi
}

install_python() {
  # shellcheck disable=SC1090
  source "$HOME/etc/profile.d/python"

  install_python_version 2.7.14
  install_python_version 3.6.3

  pyenv shell 2.7.14
}

install_python_version() {
  PYTHON_VERSION="$1"
  PYTHON_VIRTUAL_ENV="neovim-python-$PYTHON_VERSION"

  echo "Setting up python $PYTHON_VERSION..."

  pyenv install -s "$PYTHON_VERSION"
  pyenv virtualenv "$PYTHON_VERSION" "$PYTHON_VIRTUAL_ENV"
  pyenv activate "$PYTHON_VIRTUAL_ENV"

  echo "Setting packages for python $PYTHON_VERSION..."
  pip install neovim
  pip install awscli
  pip install powerline-shell

  PYTHON_PATH=$(pyenv which python)
  echo "Python $PYTHON_VERSION is installed at $PYTHON_PATH"
}

install_node() {
  # shellcheck disable=SC1090
  source "$HOME/etc/profile.d/node"

  NODE_VERSION="9.2.0"

  nvm install "$NODE_VERSION"
  nvm use "$NODE_VERSION"

  npm install -g yarn
  npm install -g typescript
  npm install -g jest-cli
  npm install -g create-react-app
}

install_rust() {
  cargo install racer
  rustup component add rust-src
  cargo install diesel_cli --no-default-features --features "postgres sqlite"
}

osx_software_update() {
  softwareupdate --install --all
}

osx_configure() {
  local config

  cd "${HOME}/etc/defaults" || return

  for config in *
  do
    # shellcheck source=/dev/null
    . "$config"
  done
}

git_configure() {
  echo "Ensuring git configs are set up..."
  local gitconfig

  if [[ ! -f "${HOME}/.gitconfig" ]] ; then
    write_git_config
  fi

  if [[ $(head -n2 "${HOME}/.gitconfig") != "[include]
  path = ${HOME}/.gitconfigrc" ]] ; then
    gitconfig=$(cat "${HOME}/.gitconfig")
    write_git_config
    echo "${gitconfig}" >> "${HOME}/.gitconfig"
  fi
}

write_git_config() {
  echo "[include]" > "${HOME}/.gitconfig"
  echo "  path = ${HOME}/.gitconfigrc" >> "${HOME}/.gitconfig"
}

symlink_ssl() {
  ln -s /usr/local/opt/openssl/lib/libcrypto.1.0.0.dylib /usr/local/lib/ || true
  ln -s /usr/local/opt/openssl/lib/libssl.1.0.0.dylib /usr/local/lib/ || true
}

osx_appstore_update() {
  if which mas >&-
  then
    mas outdated | while read -r app_id_and_name
    do
      echo "Updating ${app_id_and_name##* }..."
      mas install "${app_id_and_name%% *}"
    done
  fi
}

reload_modified_services() {
  local modified_services=("${RELOAD_SERVICES[@]:?must be defined}")
  local modified_services_uniq=(
    "$(printf "%s\\n" "${modified_services[@]}" | sort -u)"
  )

  killall "${modified_services_uniq[@]}"
}

update_vim_plugins() {
  vim +PluginInstall +qall
  vim +GoUpdateBinaries +qall
}

update_tmux_plugins() {
  # shellcheck disable=SC1091
  # shellcheck source=${HOME}/.tmux/plugins/tpm/bin/install_plugins
  . "${HOME}/.tmux/plugins/tpm/bin/install_plugins" || true
  # shellcheck disable=SC1091
  # shellcheck source=${HOME}/.tmux/plugins/tpm/bin/update_plugins
  . "${HOME}/.tmux/plugins/tpm/bin/update_plugins" all || true
}

update_golang_packages() {
  export GOPATH="${GOPATH:-"${HOME}/go"}"

  cd "${HOME}/go/packages" || return

  for pkg in *
  do
   go get "${pkg//\~//}"
  done
}

install_libs() {
  cd "$HOME/lib" || true
  curl -O http://www.antlr.org/download/antlr-4.7-complete.jar
}

configure_gimp() {
  cd "$HOME/Library/Application Support/GIMP" || true
  backup_dir=2.8.backup

  if [ ! -d "$backup_dir" ]; then
    mv 2.8 "$backup_dir"
    git clone --depth=1 https://github.com/doctormo/GimpPs.git 2.8
  fi
}

configure_postgres() {
  "$(brew --prefix postgres)/bin/createuser" -s postgres || true
}

main
