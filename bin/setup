#!/bin/bash

[ -z "$DEBUG" ] || set -x

RELOAD_SERVICES=()

main() {
  osx_software_update

  install_brew_if_not_exists
  install_brew_update

  configure_gimp

  symlink_ssl

  install_ruby
  install_ruby_gems
  install_python_packages
  install_libs

  osx_configure
  osx_appstore_update
  git_configure
  configure_postgres
  reload_modified_services

  update_golang_packages
  update_vim_plugins
  update_tmux_plugins
  update_npm_packages

}

install_brew_if_not_exists() {
  if [[ ! -x /usr/local/bin/brew ]] ; then
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  fi
}

install_brew_update() {
  pushd "${HOME}/etc"
    brew tap Homebrew/bundle
    brew update
    brew bundle
    brew bundle cleanup
    brew cask cleanup
  popd
}

install_ruby() {
  echo "Setting up ruby..."
  # chruby contains unbound variables
  set +u
  # shellcheck disable=SC1091
  . /usr/local/share/chruby/chruby.sh

  if chruby "$(cat "${HOME}/.ruby-version")" > /dev/null 2>&1; then
    echo "$(cat "${HOME}/.ruby-version") already installed..."
  else
    echo "will install $(cat "${HOME}/.ruby-version")..."
    ruby-install "$(cat ~/.ruby-version)"
  fi
  set -u

}

install_ruby_gems() {
  gem install fastri
  gem install bundler
  gem install neovim
  gem install rcodetools
}

install_python_packages() {
  pip install neovim
  pip3 install neovim
}

osx_software_update() {
  softwareupdate --install --all
}

osx_configure() {
  local config

  pushd "${HOME}/etc/defaults" >&-
    for config in *
    do
      # shellcheck source=/dev/null
      . "$config"
    done
  popd >&-
}

git_configure() {
  echo "Ensuring git configs are set up..."
  local gitconfig

  if [[ ! -f "${HOME}/.gitconfig" ]] ; then
    write_git_config
  fi

  if [[ $(head -n2 "${HOME}/.gitconfig") != "[include]
  path = ${HOME}/.gitconfigrc" ]] ; then
    gitconfig=$(cat "${HOME}/.gitconfig")
    write_git_config
    echo "${gitconfig}" >> "${HOME}/.gitconfig"
  fi
}

write_git_config() {
    echo "[include]" > "${HOME}/.gitconfig"
    echo "  path = ${HOME}/.gitconfigrc" >> "${HOME}/.gitconfig"
}

symlink_ssl() {
  ln -s /usr/local/opt/openssl/lib/libcrypto.1.0.0.dylib /usr/local/lib/ || true
  ln -s /usr/local/opt/openssl/lib/libssl.1.0.0.dylib /usr/local/lib/ || true
}

osx_appstore_update() {
  if which mas >&-
  then
    mas outdated | while read -r app_id_and_name
    do
      echo "Updating ${app_id_and_name##* }..."
      mas install "${app_id_and_name%% *}"
    done
  fi
}

reload_modified_services() {
  local modified_services=(${RELOAD_SERVICES[@]:?must be defined})
  local modified_services_uniq=(
    $(printf "%s\n" "${modified_services[@]}" | sort -u)
  )

  killall "${modified_services_uniq[@]}"
}

update_vim_plugins() {
  vim +PluginInstall +qall
  vim +GoUpdateBinaries +qall
}

update_tmux_plugins() {
  # shellcheck disable=SC1091
  # shellcheck source=${HOME}/.tmux/plugins/tpm/bin/install_plugins
  . "${HOME}/.tmux/plugins/tpm/bin/install_plugins" || true
  # shellcheck disable=SC1091
  # shellcheck source=${HOME}/.tmux/plugins/tpm/bin/update_plugins
  . "${HOME}/.tmux/plugins/tpm/bin/update_plugins" all || true
}

update_golang_packages() {
export GOPATH="${GOPATH:-"${HOME}/go"}"

pushd "${HOME}/go/packages" >&-
 for pkg in *
 do
  go get "${pkg//\~//}"
 done
popd >&-
}

update_npm_packages() {
  npm install -g jasmine
  npm install -g karma-cli
  npm install -g tslint
  npm install -g tsutils
  npm install -g typescript
  npm install -g stylelint
  npm install -g webpack
  npm install -g flow-bin
  npm install -g create-react-app
  npm install node-gyp node-pre-gyp -g
}

install_libs() {
  cd "$HOME/lib" || true
  curl -O http://www.antlr.org/download/antlr-4.7-complete.jar
}

configure_gimp() {
  cd "$HOME/Library/Application Support/GIMP" || true
  backup_dir=2.8.backup

  if [ ! -d "$backup_dir" ]; then
    mv 2.8 "$backup_dir"
    git clone --depth=1 https://github.com/doctormo/GimpPs.git 2.8
  fi
}

configure_postgres() {
  "$(brew --prefix postgres)/bin/createuser" -s postgres || true
}

main
