#!/bin/bash

[ -z "$DEBUG" ] || set -x

RELOAD_SERVICES=()

main() {
  osx_software_update

  install_brew_if_not_exists
  install_brew_update

  install_ruby
  install_python
  install_node
  install_rust
  install_perl

  osx_configure
  osx_appstore_update
  git_configure
  reload_modified_services

  update_golang_packages
  update_vim_plugins
  update_tmux_plugins
}

install_brew_if_not_exists() {
  if [[ ! -x /usr/local/bin/brew ]] ; then
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  fi
}

install_brew_update() {
  cd "${HOME}/etc" || return

  brew tap Homebrew/bundle
  brew update
  brew bundle
  brew bundle cleanup
  brew cleanup
}

install_ruby() {
  echo "Setting up ruby..."

  RUBY_VERSION="ruby-2.5.0"
  # shellcheck disable=SC1091
  source /usr/local/share/chruby/chruby.sh

  if chruby "$RUBY_VERSION" /dev/null 2>&1; then
    echo "$RUBY_VERSION is already installed..."
  else
    ruby-install "$RUBY_VERSION"
  fi

  gem install bundler --conservative
  gem install neovim --conservative
  gem install pry --conservative
  gem install rspec --conservative
  gem install apiaryio --conservative
  gem install tmuxinator --conservative
  gem install guard --conservative
  gem install guard-shell --conservative
}

install_python() {
  echo "Setting packages for python"

  pip install --upgrade -r "$HOME/etc/python/system-dependencies"

  install_python_for_vim
}

install_python_for_vim() {
  echo "Setting up Python v3 for Vim"

  python3 -m venv "$HOME/.vim/python/v3"

   # shellcheck disable=SC1090
  source "$HOME/.vim/python/v3/bin/activate"

  pip3 install --upgrade -r "$HOME/etc/python/vim-dependencies"
}

npm_install() {
  if ! [ -x "$(npm list "$1" 2>&1>/dev/null)" ]; then
    npm update -g "$1"
  else
    npm install -g "$1"
  fi
}

install_node() {
  # shellcheck disable=SC1090
  source "$HOME/etc/profile.d/node"

  NODE_VERSION="11.10.0"

  nvm install "$NODE_VERSION"

  npm_install yarn
  npm_install typescript
  npm_install jest-cli
  npm_install create-react-app
  npm_install livedown
}

install_rust() {
  export PATH="$HOME/.cargo/bin:$PATH"

  if rustup component list | grep -q rust-src; then
    rustup component add rust-src
  fi

  if ! [ -x "$(command -v racer)" ]; then
    cargo install racer
  fi

  if ! [ -x "$(command -v diesel)" ]; then
    cargo install diesel_cli --no-default-features --features "postgres sqlite"
  fi
}

install_perl() {
  sudo cpan Template
}

osx_software_update() {
  softwareupdate --install --all
}

osx_configure() {
  local config

  cd "${HOME}/etc/defaults" || return

  for config in *
  do
    # shellcheck source=/dev/null
    . "$config"
  done
}

git_configure() {
  echo "Ensuring git configs are set up..."
  local gitconfig

  if [[ ! -f "${HOME}/.gitconfig" ]] ; then
    write_git_config
  fi

  if [[ $(head -n2 "${HOME}/.gitconfig") != "[include]
  path = ${HOME}/.gitconfigrc" ]] ; then
    gitconfig=$(cat "${HOME}/.gitconfig")
    write_git_config
    echo "${gitconfig}" >> "${HOME}/.gitconfig"
  fi
}

write_git_config() {
  echo "[include]" > "${HOME}/.gitconfig"
  echo "  path = ${HOME}/.gitconfigrc" >> "${HOME}/.gitconfig"
}

symlink_ssl() {
  ln -s /usr/local/opt/openssl/lib/libcrypto.1.0.0.dylib /usr/local/lib/ || true
  ln -s /usr/local/opt/openssl/lib/libssl.1.0.0.dylib /usr/local/lib/ || true
}

osx_appstore_update() {
  if which mas >&-
  then
    mas outdated | while read -r app_id_and_name
    do
      echo "Updating ${app_id_and_name##* }..."
      mas install "${app_id_and_name%% *}"
    done
  fi
}

reload_modified_services() {
  local modified_services=("${RELOAD_SERVICES[@]:?must be defined}")
  local modified_services_uniq=(
    "$(printf "%s\\n" "${modified_services[@]}" | sort -u)"
  )

  killall "${modified_services_uniq[@]}"
}

update_vim_plugins() {
  nvim +PluginInstall +qall
  nvim +GoUpdateBinaries +qall
}

update_tmux_plugins() {
  # shellcheck disable=SC1091
  # shellcheck source=${HOME}/.tmux/plugins/tpm/bin/install_plugins
  . "${HOME}/.tmux/plugins/tpm/bin/install_plugins" || true
  # shellcheck disable=SC1091
  # shellcheck source=${HOME}/.tmux/plugins/tpm/bin/update_plugins
  . "${HOME}/.tmux/plugins/tpm/bin/update_plugins" all || true
}

update_golang_packages() {
  export GO111MODULE=off
  export GOPATH="${GOPATH:-"${HOME}/go"}"

  cd "${HOME}/go/packages" || return

  for pkg in *
  do
   go get "${pkg//\~//}"
  done
}

main
